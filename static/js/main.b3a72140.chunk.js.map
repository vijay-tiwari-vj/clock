{"version":3,"sources":["components/SetTimer.js","App.js","serviceWorker.js","index.js"],"names":["SetTimer","props","id","title","toLowerCase","className","onClick","handleDecrease","icon","faMinus","count","handleIncrease","faPlus","audio","document","getElementById","App","state","breakCount","sessionCount","clockCount","currentTimer","isPlaying","handlePlayPause","clearInterval","loop","setState","setInterval","play","handleReset","pause","currentTime","convertToTime","minutes","Math","floor","seconds","handleBreakDecrease","handleBreakIncrease","handleSessionDecrease","handleSessionIncrease","undefined","this","breakProps","sessionProps","faPause","faPlay","faSync","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3a72140.chunk.js","sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const SetTimer = (props) => {\r\n  const id = props.title.toLowerCase();\r\n  return (\r\n    <div className=\"timer-container\">\r\n      <h2 id={`${id}-label`}>\r\n        {props.title} Length\r\n      </h2>\r\n      <div className=\"flex actions-wrapper\">\r\n        <button id={`${id}-decrement`} onClick={props.handleDecrease}>\r\n          <FontAwesomeIcon icon={faMinus} />\r\n        </button>\r\n\r\n        <span id={`${id}-length`}>{props.count}</span>\r\n\r\n        <button id={`${id}-increment`} onClick={props.handleIncrease}>\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SetTimer;\r\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPause, faPlay, faSync } from '@fortawesome/free-solid-svg-icons';\n\nimport SetTimer from './components/SetTimer';\n\nconst audio = document.getElementById('beep');\n\nexport class App extends Component {\n  state = {\n    breakCount: 5,\n    sessionCount: 25,\n    clockCount: 25 * 60,\n    currentTimer: 'Session',\n    isPlaying: false,\n  }\n\n  constructor() {\n    super();\n    this.loop = undefined;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.loop);\n  }\n\n  handlePlayPause = () => {\n    const { isPlaying } = this.state;\n\n    if (isPlaying) {\n      clearInterval(this.loop);\n      this.setState({\n        isPlaying: false\n      });\n    } else {\n      this.setState({\n        isPlaying: true\n      });\n      this.loop = setInterval(() => {\n        const { clockCount, currentTimer, breakCount, sessionCount } = this.state;\n\n        if (clockCount === 0) {\n          this.setState({\n            currentTimer: (currentTimer === 'Session') ? 'Break' : 'Session',\n            clockCount: (currentTimer === 'Session') ? (breakCount * 60) : (sessionCount * 60)\n          })\n\n          audio.play()\n        } else {\n          this.setState({\n            clockCount: clockCount - 1\n          });\n        }\n      }, 1000);\n    }\n  }\n\n  handleReset = () => {\n    this.setState({\n      breakCount: 5,\n      sessionCount: 25,\n      clockCount: 25 * 60,\n      currentTimer: 'Session',\n      isPlaying: false\n    });\n\n    clearInterval(this.loop);\n\n    audio.pause();\n    audio.currentTime = 0;\n  }\n\n  convertToTime = (count) => {\n    let minutes = Math.floor(count / 60);\n    let seconds = count % 60;\n\n    minutes = minutes < 10 ? ('0' + minutes) : minutes;\n    seconds = seconds < 10 ? ('0' + seconds) : seconds;\n    return `${minutes}:${seconds}`;\n  }\n\n  handleBreakDecrease = () => {\n    const { breakCount, isPlaying, currentTimer } = this.state;\n\n    if (breakCount > 1) {\n      if (!isPlaying && currentTimer === 'Break') {\n        this.setState({\n          breakCount: breakCount - 1,\n          clockCount: (breakCount - 1) * 60\n        });\n      } else {\n        this.setState({\n          breakCount: breakCount - 1\n        });\n      }\n    }\n  }\n\n  handleBreakIncrease = () => {\n    const { breakCount, isPlaying, currentTimer } = this.state;\n\n    if (breakCount < 60) {\n      if (!isPlaying && currentTimer === 'Break') {\n        this.setState({\n          breakCount: breakCount + 1,\n          clockCount: (breakCount + 1) * 60\n        });\n      } else {\n        this.setState({\n          breakCount: breakCount + 1\n        });\n      }\n    }\n  }\n\n  handleSessionDecrease = () => {\n    const { sessionCount, isPlaying, currentTimer } = this.state;\n\n    if (sessionCount > 1) {\n      if (!isPlaying && currentTimer === 'Session') {\n        this.setState({\n          sessionCount: sessionCount - 1,\n          clockCount: (sessionCount - 1) * 60\n        });\n      } else {\n        this.setState({\n          sessionCount: sessionCount - 1\n        });\n      }\n    }\n  }\n\n  handleSessionIncrease = () => {\n    const { sessionCount, isPlaying, currentTimer } = this.state;\n\n    if (sessionCount < 60) {\n      if (!isPlaying && currentTimer === 'Session') {\n        this.setState({\n          sessionCount: sessionCount + 1,\n          clockCount: (sessionCount + 1) * 60\n        });\n      } else {\n        this.setState({\n          sessionCount: sessionCount + 1\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      breakCount,\n      sessionCount,\n      clockCount,\n      currentTimer,\n      isPlaying\n    } = this.state;\n\n    const breakProps = {\n      title: 'Break',\n      count: breakCount,\n      handleDecrease: this.handleBreakDecrease,\n      handleIncrease: this.handleBreakIncrease\n    }\n\n    const sessionProps = {\n      title: 'Session',\n      count: sessionCount,\n      handleDecrease: this.handleSessionDecrease,\n      handleIncrease: this.handleSessionIncrease\n    }\n\n    return (\n      <div>\n\n        <div className=\"flex\">\n          <SetTimer {...breakProps} />\n          <SetTimer {...sessionProps} />\n        </div>\n\n        <div className=\"clock-container\">\n          <h1 id=\"timer-label\">{currentTimer}</h1>\n          <span id=\"time-left\">{this.convertToTime(clockCount)}</span>\n          <div className=\"flex\">\n            <button id=\"start_stop\" onClick={this.handlePlayPause}>\n              <FontAwesomeIcon icon={isPlaying ? faPause : faPlay} />\n            </button>\n\n            <button id=\"reset\" onClick={this.handleReset}>\n              <FontAwesomeIcon icon={faSync} />\n            </button>\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}